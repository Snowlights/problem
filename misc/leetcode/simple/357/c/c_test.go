// Code generated by template/gen/leetcode/generator_test.go
package main

import (
	"problems/testutil/leetcode"
	"testing"
)

func Test_c(t *testing.T) {
	targetCaseNum := 0 // -1
	if err := leetcode.RunLeetCodeFuncWithFile(t, maximumSafenessFactor, "c.txt", targetCaseNum); err != nil {
		t.Fatal(err)
	}
}

// https://leetcode.cn/contest/weekly-contest-357/problems/find-the-safest-path-in-a-grid/
// https://leetcode.cn/problems/find-the-safest-path-in-a-grid/

// """
//二分答案
//
//最大化离 1 的最近距离
//
//1. 怎么标记不能走的格子
//2. 怎么判断能从左上走到右下
//
//
//
//接近于 O(n^2)
//
//从大到小枚举答案
//
//"""
//class Solution:
//    def maximumSafenessFactor(self, grid: List[List[int]]) -> int:
//        n = len(grid)
//        q = []
//        dis = [[-1] * n for _ in range(n)]
//        for i, row in enumerate(grid):
//            for j, x in enumerate(row):
//                if x:
//                    q.append((i, j))
//                    dis[i][j] = 0
//
//        groups = [q]
//        while q:
//            tmp = q
//            q = []
//            for i, j in tmp:
//                for x, y in (i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1):
//                    if 0 <= x < n and 0 <= y < n and dis[x][y] < 0:
//                        q.append((x, y))
//                        dis[x][y] = len(groups)
//            groups.append(q)
//
//        # 并查集模板
//        fa = list(range(n * n))
//        def find(x: int) -> int:
//            if fa[x] != x:
//                fa[x] = find(fa[x])
//            return fa[x]
//        def merge(x: int, y: int):
//            fa[find(x)] = find(y)
//
//        for ans in range(len(groups) - 2, 0, -1):
//            for i, j in groups[ans]:
//                for x, y in (i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1):
//                    if 0 <= x < n and 0 <= y < n and dis[x][y] >= dis[i][j]:
//                        merge(x * n + y, i * n + j)
//            if find(0) == find(n * n - 1):  # 写这里判断更快些
//                return ans
//        return 0
